<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://tuijianjichang.github.io/news/article-65868.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>C语言 模拟实现memcpy与memmove函数详解_C 语言</title>
        <meta name="description" content="目录  一、memcpy函数的介绍  1.函数的声明 2.函数功能与注意事项 3.函数的使用  二、模拟实现memcpy函数  1.模拟分析 2.模拟实现  三、memmove函数的介绍  1.函数的" />
        <link rel="icon" href="/assets/website/img/clashstash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="推荐机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://tuijianjichang.github.io/news/article-65868.htm" />
    <meta property="og:site_name" content="推荐机场节点官网" />
    <meta property="og:title" content="C语言 模拟实现memcpy与memmove函数详解_C 语言" />
    <meta property="og:image" content="https://tuijianjichang.github.io/uploads/20240709/adc839bd1d2be238d9ce140c578c791d.webp" />
        <meta property="og:release_date" content="2025-03-02T09:37:52" />
    <meta property="og:updated_time" content="2025-03-02T09:37:52" />
        <meta property="og:description" content="目录  一、memcpy函数的介绍  1.函数的声明 2.函数功能与注意事项 3.函数的使用  二、模拟实现memcpy函数  1.模拟分析 2.模拟实现  三、memmove函数的介绍  1.函数的" />
        
    <link rel="stylesheet" href="/assets/website/css/clashstash/maicons.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/theme.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C语言 模拟实现memcpy与memmove函数详解_C 语言">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SVM5SLXX0V"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SVM5SLXX0V');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light bg-white sticky" data-offset="500">
            <div class="container">
                                <a href="/" class="navbar-brand">推荐机场</a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </div>
        </nav>
        <div class="container">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-6">
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                        <h1 class="text-center">C语言 模拟实现memcpy与memmove函数详解_C 语言</h1>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <div class="page-section" id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">一、memcpy函数的介绍</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_0_0" rel="nofollow">1.函数的声明</a></li> <li><a href="#_lab2_0_1" rel="nofollow">2.函数功能与注意事项</a></li> <li><a href="#_lab2_0_2" rel="nofollow">3.函数的使用</a></li> </ul> <li><a href="#_label1" rel="nofollow">二、模拟实现memcpy函数</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_1_3" rel="nofollow">1.模拟分析</a></li> <li><a href="#_lab2_1_4" rel="nofollow">2.模拟实现</a></li> </ul> <li><a href="#_label2" rel="nofollow">三、memmove函数的介绍</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_2_5" rel="nofollow">1.函数的声明</a></li> <li><a href="#_lab2_2_6" rel="nofollow">2.为什么会有memmove函数</a></li> <li><a href="#_lab2_2_7" rel="nofollow">3.函数功能与注意事项</a></li> <li><a href="#_lab2_2_8" rel="nofollow">4.函数的使用</a></li> </ul> <li><a href="#_label3" rel="nofollow">四、模拟实现memmove函数</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_3_9" rel="nofollow">1.模拟分析</a></li> <li><a href="#_lab2_3_10" rel="nofollow">2.模拟实现</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>一、memcpy函数的介绍</h2> <p class="maodian"><a name="_lab2_0_0" rel="nofollow"></a></p> <p class="maodian"><a name="_lab2_2_5" rel="nofollow"></a></p> <h3>1.函数的声明</h3> <blockquote> <p>void * memcpy ( void * destination, const void * source, size_t num );</p> </blockquote> <p class="maodian"><a name="_lab2_0_1" rel="nofollow"></a></p> <h3>2.函数功能与注意事项</h3> <ul> <li>函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置。</li> <li>注意这个函数在遇到 '\0' 的时候并不会停下来。</li> <li>如果source和destination有任何的重叠，复制的结果都是未定义的。</li> <li>memcpy函数可以拷贝任何的类型的数据，不像strcpy函数只能拷贝字符串。</li> </ul> <p class="maodian"><a name="_lab2_0_2" rel="nofollow"></a></p> <h3>3.函数的使用</h3> <div class="ay1code"> <pre class="brush:cpp;">#include &lt;stdio.h&gt;  #include &lt;string.h&gt;//使用memcpy函数时记得引用它的头文件  int main()  {  	int arr1[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	int arr2[5] = { 0 };//总共大小为20字节  	memcpy(arr1, arr2, 20//拷贝20个字节的数据);//将arr2中的数据拷贝到arr1中  	int i = 0;  	printf("拷贝后arr1中的数据为：");  	for (i = 0; i &lt; 10; i++)  	{  		printf("%d ", arr1[i]);  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img fetchpriority="high" decoding="async" alt="" height="194" src="http://img.555519.xyz/uploads3/20220420/11395b199ec38a96e11980ebd836c9e9.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>二、模拟实现memcpy函数</h2> <p class="maodian"><a name="_lab2_1_3" rel="nofollow"></a></p> <p class="maodian"><a name="_lab2_3_9" rel="nofollow"></a></p> <h3>1.模拟分析</h3> <p>1.因为我们不知道我们要拷贝的是什么类型的数据，可能是char类型的数据，也可能是int类型的数据，还有可能是double类型的数据，这些不同类型数据的大小是不同的。为了实现一个能拷贝所有类型数据的memcpy函数，我们就只能一个字节一个字节的拷贝，因为最小类型的大小是一个字节，这样就能将所有类型的数据都进行拷贝了。</p> <p>2.因为我们不知道传到memcpy函数的地址是什么类型，所以我们在接收传过来的地址时要用void*类型的指针来接收。</p> <p>3.由于我们只需要将源地址存储的数据拷贝到目标地址里面，所以只需要改变目标地址处存储的内容，而不需要改变源地址处存储的地址。所以我们就需要用const void*类型的指针来接收源地址。</p> <p>4.为了实现链式访问，我们要将传进来的目标起始地址（destination）返回。由于这个函数在执行的时候会改变destination存储的内容，所以我们要重新创建一个void*类型的指针来存储这个地址。</p> <p>5.为了避免传进来的地址是空指针，我们需要用assert来断言传进来的地址不是空指针。</p> <p class="maodian"><a name="_lab2_1_4" rel="nofollow"></a></p> <p class="maodian"><a name="_lab2_3_10" rel="nofollow"></a></p> <h3>2.模拟实现</h3> <div class="ay1code"> <pre class="brush:cpp;">#include&lt;stdio.h&gt;  #include&lt;assert.h&gt;  //模拟实现memcpy  void* my_memcpy(void* dest, const void* scr, size_t count)  {  	assert(dest &amp;&amp; scr);//断言传进来的地址不是空指针  	void* ret = dest;//保存目标起始地址  	while (count--)//拷贝源地址存储的数据  	{  		*(char*)dest = *(char*)scr;  		(char*)dest = (char*)dest + 1;  		(char*)scr = (char*)scr + 1;  	}  	return ret;//返回目标起始地址  }              //应用模拟实现的函数  int main()  {  	int arr1[] = { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 };  	int arr2[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memcpy(arr2, arr1, 24);//拷贝6个字节的数据  	int i = 0;  	for (i = 0; i &lt; 10; i++)  	{  		printf("%d ", arr2[i]);  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img decoding="async" alt="" height="175" src="http://img.555519.xyz/uploads3/20220420/21f573b210b73fb268ae8408008d0350.jpg"></p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>三、memmove函数的介绍</h2> <h3>1.函数的声明</h3> <blockquote> <p>void * memmove ( void * destination, const void * source, size_t num );</p> </blockquote> <p class="maodian"><a name="_lab2_2_6" rel="nofollow"></a></p> <h3>2.为什么会有memmove函数</h3> <p>为什么会有memmove这个函数呢，这个还要从上面的memcpy函数说起。因为memcpy函数不能将一个数组的中的数据拷贝到自身（也就是目标数据是自己，源数据也是自己，只不过是一个数组里面不同的位置的数据拷贝到另外一个位置上），如果像这样拷贝就会出现重叠拷贝，会导致结果不是我们预期的结果。</p> <p>就像下面这个代码：</p> <div class="ay1code"> <pre class="brush:cpp;">//应用模拟实现的memcpy函数  int main()  {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memcpy(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i &lt; 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p>运行结果：</p> <p style="text-align:center"><img decoding="async" alt="" height="192" src="http://img.555519.xyz/uploads3/20220420/3cbcac7502ff104260349065eb7507c4.jpg"></p> <p> 出现预期结果和实际结果不同的原因：</p> <p>出现这种结果的原因就是因为memcpy函数将自身数据拷贝到自身不同位置的时候出现了重叠拷贝。源数据的起始地址为arr，目标数据的起始地址arr + 2，当我们一进来memcpy这个函数的时候，我们就先将arr处的数据拷贝到arr + 2处，将arr + 1处的数据拷贝到arr + 3处，当我们想要将arr + 2处的数据拷贝到arr + 4处的时候，我们发现arr + 2处的数据已经被替换成了arr处的数据（1），于是我们就只能将1拷贝到arr + 4处；当我们要将arr + 3处的数据拷贝到arr + 5处的时候，我们发现arr + 3处的数据早已被替换成了arr + 1处的数据（2），所以我们只能将2拷贝到arr + 5处，就像这样反复的重叠拷贝，拷贝的数据一直都是1/2/1/2/1/2，直到拷贝完我们想要拷贝的字节数。</p> <p>于是为了将自身的数据拷贝到自身不同的位置处，我们就需要用memmove函数来实现，memmove函数就是为了解决上面这种问题而被创造的。</p> <p class="maodian"><a name="_lab2_2_7" rel="nofollow"></a></p> <h3>3.函数功能与注意事项</h3> <ul> <li>memmove和memcpy的差别就是memmove函数处理的源内存块和目标内存块是可以重叠的。</li> <li>如果源空间和目标空间出现重叠，就得使用memmove函数处理。</li> </ul> <p class="maodian"><a name="_lab2_2_8" rel="nofollow"></a></p> <h3>4.函数的使用</h3> <div class="ay1code"> <pre class="brush:cpp;">#include&lt;stdio.h&gt;  #include&lt;string.h&gt;//使用memmove函数时记得引用它的头文件  int main()                    {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	memmove(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i &lt; 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="168" src="http://img.555519.xyz/uploads3/20220420/b15aca85d99fd7a96aec12d5a92792b6.jpg"></p> <p> 这次我们发现用memmove函数来拷贝的预期结果和实际结果就一样了，下面我们就讲讲memmove函数的模拟实现。</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>四、模拟实现memmove函数</h2> <h3>1.模拟分析</h3> <p>1.将地址传进函数和函数接收地址的方法和上面的memcpy函数是一样的，memcpy函数需要注意的地方memmove函数同样需要注意，这里就不重复讲了，嘿嘿。</p> <p>2.memmove函数还需要注意的一点就是需要分析该怎么拷贝才不会重叠，下面为图解：</p> <p>情况一：dest小于等于src的地址</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="339" src="http://img.555519.xyz/uploads3/20220420/a2be6da09901ec88f116dae4f5d7d15d.jpg"></p> <p>像下面这样从前往后拷贝，这样就不会重叠了。</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="168" src="http://img.555519.xyz/uploads3/20220420/7e0cbadc13cfa6f089ae9c3d75148d78.jpg"></p> <p> 情况二：dest大于scr的地址</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="317" src="http://img.555519.xyz/uploads3/20220420/ea305970d0c927a0d3d13b0d7897ef6e.jpg"></p> <p>像下面这样从后往前拷贝，这样就不会重叠了。</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="201" src="http://img.555519.xyz/uploads3/20220420/d979362fdbc20b56dc724213befedf41.jpg"></p> <h3>2.模拟实现</h3> <div class="ay1code"> <pre class="brush:cpp;">#include&lt;stdio.h&gt;  #include&lt;assert.h&gt;  //模拟实现memmove  void* my_memmove(void* dest, const void* scr, size_t count)  {  	assert(dest &amp;&amp; scr);//断言传进来的地址不是空指针  	void* ret = dest; //保存目标起始地址  	if (dest &lt;= scr)//从前往后拷贝  	{  		while (count--)  		{  			*(char*)dest = *(char*)scr;  			(char*)dest = (char*)dest + 1;  			(char*)scr = (char*)scr + 1;  		}  	}  	else//从后往前拷贝  	{  		while (count--)  		{  			*((char*)dest + count) = *((char*)scr + count);  		}  	}  	return ret;  }                 //应用模拟实现的函数  int main()                    {  	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };  	my_memmove(arr + 2, arr, 24);//预期出现结果为1 2 1 2 3 4 5 6 9 10  	int i = 0;  	for (i = 0; i &lt; 10; i++)  	{  		printf("%d ", arr[i]);//实际出现结果  	}  	return 0;  }</pre> </div> <p>  运行结果</p> <p style="text-align:center"><img loading="lazy" decoding="async" alt="" height="184" src="http://img.555519.xyz/uploads3/20220420/2fa5ed57f2c166ae334f645f8e8cefb9.jpg"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-65867.htm">我们如何从MySQL表中获取特定行作为输出？</a></p>
                                        <p>下一个：<a href="/news/article-66498.htm">springboot整合spring retry 重试机制</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-57023.htm" title="做梦梦到抱别的女人睡觉好不好（做梦梦见抱着别的女人）">做梦梦到抱别的女人睡觉好不好（做梦梦见抱着别的女人）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-6-node-share-links.htm" title="推荐机场 | 2月6日22M/S|免费VPN/V2ray/SSR/Clash/Shadowrocket免费节点链接地址">推荐机场 | 2月6日22M/S|免费VPN/V2ray/SSR/Clash/Shadowrocket免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-54805.htm" title="哈尔滨王允海宠物医院怎么样呀多少钱啊（王允海动物医院道里店怎么样）">哈尔滨王允海宠物医院怎么样呀多少钱啊（王允海动物医院道里店怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-55908.htm" title="让猫挠了出血用***不（让猫挠了出血需要打几针）">让猫挠了出血用***不（让猫挠了出血需要打几针）</a></li>
                        <li class="py-2"><a href="/news/article-66500.htm" title="动物疫苗的种类有哪些,各有什么特点呢（动物疫苗种类及类型）">动物疫苗的种类有哪些,各有什么特点呢（动物疫苗种类及类型）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-26-free-node-subscribe.htm" title="推荐机场 | 2月26日18.6M/S|免费VPN/Shadowrocket/SSR/Clash/V2ray免费节点链接地址">推荐机场 | 2月26日18.6M/S|免费VPN/Shadowrocket/SSR/Clash/V2ray免费节点链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-free-subscribe-node.htm" title="推荐机场 | 2月19日21.3M/S|免费VPN/V2ray/Clash/SSR/Shadowrocket免费节点链接地址">推荐机场 | 2月19日21.3M/S|免费VPN/V2ray/Clash/SSR/Shadowrocket免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-62807.htm" title="宠物粮品牌排行榜前十 宠物粮品牌排行榜前十名">宠物粮品牌排行榜前十 宠物粮品牌排行榜前十名</a></li>
                        <li class="py-2"><a href="/news/article-59301.htm" title="第2章 图灵的计算王国">第2章 图灵的计算王国</a></li>
                        <li class="py-2"><a href="/news/article-59872.htm" title="动物疫苗多少钱一支啊图片大全集（动物疫苗法最新消息2019）">动物疫苗多少钱一支啊图片大全集（动物疫苗法最新消息2019）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- .container -->
    </div> <!-- .page-section -->
        <footer class="page-footer bg-image" style="background-image: url(/assets/website/img/clashstash/world_pattern.svg);">
        <div class="container">
            <p class="text-center" id="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <a href="/">推荐机场节点官网</a> 版权所有
                <br />Powered by WordPress
            </p>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/clashstash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashstash/bootstrap.bundle.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>